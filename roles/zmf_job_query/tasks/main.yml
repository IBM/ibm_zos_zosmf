# Copyright (c) IBM Corporation 2020 
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)

---
- name: Validate variables
  block:
    - name: Validate variables - Initialize variables
      set_fact:
        job_search_logic_upper: "{{ job_search_logic | upper }}"
        user: "{{ zmf_user | default() }}"
        password: "{{ zmf_password | default() }}"
        crt: "{{ zmf_crt | default() }}"
        key: "{{ zmf_key | default() }}"
        final_result: {}
        empty_str: ""

    - name: Validate variables - Fail if either zmf_user/zmf_password or zmf_crt/zmf_key are not defined
      fail:
        msg: "Please define either zmf_user/zmf_password or zmf_crt/zmf_key."
      when:
        - user == empty_str or password == empty_str
        - crt == empty_str or key == empty_str

    - name: Validate variables - Fail if optional variable job_search_logic is defined with other values than "AND", "OR"
      fail:
        msg: "Please define the optional variable job_search_logic as one of below values: AND, OR"
      when:
        - job_search_logic_upper != "AND"
        - job_search_logic_upper != "OR"

    - name: Validate variables - Fail if the mandatory variable job_name or job_id is not defined
      fail:
        msg: 'Please define the mandatory variable: job_name and job_id'
      when: >
        not (job_name is defined and job_name is not none and job_name != empty_str) or
        not (job_id is defined and job_id is not none and job_id != empty_str)

- name: Query and match the return code
  block:
    - name: Query and match the return code - Send https request
      uri:
        url: "https://{{ zmf_host }}:{{ zmf_port }}/zosmf/restjobs/jobs/{{ job_name | upper }}/{{ job_id | upper }}"
        method: GET
        return_content: yes
        headers:
          X-CSRF-ZOSMF-HEADER: "ZOSMF"
        user: "{{ user }}"
        password: "{{ password }}"
        client_cert: "{{ crt }}"
        client_key: "{{ key }}"
        force_basic_auth: yes
        status_code: "200"
        validate_certs: no
      delegate_to: localhost
      register: status_result
      failed_when: no
      until: (status_result.status != 200) or ('json' in status_result) and ('status' in status_result.json) and (status_result.json.status == 'OUTPUT')
      retries: "{{ complete_check_times }}"
      delay: "{{ complete_check_delay }}"

    - name: Query and match the return code - Handle request error
      include_tasks: handle_request_error.yml
      vars:
        expect_rcode: 200
        result: "{{ status_result }}"

    - name: Query and match the return code - Retrieve job information and update final_result
      set_fact:
        final_result: "{{ final_result | combine({ \
                       'job_name': status_result.json.jobname, \
                       'job_id': status_result.json.jobid, \
                       'job_correlator': status_result.json['job-correlator'] }) }}"
        job_files_url: "{{ status_result.json['files-url'] }}"

    - block:
        - name: Query and match the return code - Check the job status
          set_fact:
            final_result: "{{ final_result | combine({ \
                           'msg': 'Job is in input processing or still running: status=' ~ status_result.json.status }) }}"
        - name: Query and match the return code - Fail if the submitted job is in input processing or still running
          fail:
            msg: "{{ final_result }}"
      when:
        - status_result.status == 200
        - status_result.json.status != 'OUTPUT'

    - name: Query and match the return code - Check the return code - Step 1 match 'CC nnnn'
      set_fact:
        job_matched_rc_str: "{{ status_result.json.retcode | regex_search('^CC') }}"
        final_result: "{{ final_result | combine({ 'job_retcode': status_result.json.retcode }) }}"

    - block:
        - name: Query and match the return code - Check the return code - Step 1 match 'CC nnnn' - Update final_result
          set_fact:
            final_result: "{{ final_result | combine({ \
                           'msg': 'Job is found but not completed. The return code is mismatched.' }) }}"

        - name: Save the contents of spool file if job_save_output_localpath is defined
          include_tasks: save_spool_files.yml
          when: job_save_output_localpath is not undefined

        - name: Query and match the return code - Check the return code - Step 1 match 'CC nnnn' - Fail if the return code is not "CC nnnn"
          fail:
            msg: "{{ final_result }}"
      when:
        - job_search_logic_upper == 'AND'
        - job_matched_rc_str == empty_str

    - block:
        - name: Query and match the return code - Check the return code - Step 2 match job_max_rc
          set_fact:
            job_matched_rc_int: "{{ status_result.json.retcode | replace('CC ', '') }}"

        - block:
            - name: Query and match the return code - Check the return code - Step 2 match job_max_rc - Update final_result
              set_fact:
                final_result: "{{ final_result | combine({ \
                              'msg': 'Job is found but not completed. The return code is mismatched.' }) }}"

            - name: Save the contents of spool file if job_save_output_localpath is defined
              include_tasks: save_spool_files.yml
              when: job_save_output_localpath is not undefined

            - name: Query and match the return code - Check the return code - Step 2 match job_max_rc - Fail if the return code is mismatched
              fail:
                msg: "{{ final_result }}"
          when:
            - job_search_logic_upper == 'AND'
            - job_matched_rc_int|int > job_max_rc|int
      when:
        - job_matched_rc_str != empty_str

- name: Query and match the contents in spool file if job_search_output is defined
  block:
    - name: Query and match the contents in spool file - Send https request if job_search_output is defined
      uri:
        url: "{{ job_files_url }}"
        method: GET
        return_content: yes
        headers:
          X-CSRF-ZOSMF-HEADER: "ZOSMF"
        user: "{{ user }}"
        password: "{{ password }}"
        client_cert: "{{ crt }}"
        client_key: "{{ key }}"
        force_basic_auth: yes
        status_code: "200"
        validate_certs: no
      delegate_to: localhost
      register: files_result
      failed_when: no

    - name: Query and match the contents in spool file - Handle request error
      include_tasks: handle_request_error.yml
      vars:
        expect_rcode: 200
        result: "{{ files_result }}"

    - name: Query and match the contents in spool file - Prepare for query each spool file
      set_fact:
        job_matched_contents: {}
        job_matched_contents_found: False

    - include_tasks: query_each_spool_file.yml
      when: (job_search_output_ddname is undefined) or (job_search_output_ddname == []) or (file_item.ddname in job_search_output_ddname)
      loop: "{{ files_result.json }}"
      loop_control:
        label: "{{ file_item.ddname }}"
        loop_var: file_item

    - name: Query and match the contents in spool file - Retrieve job information and update final_result
      set_fact:
        final_result: "{{ final_result | combine({ 'job_matched_contents': job_matched_contents }) }}"

    - block:
        - name: Check and return final_result if job_search_output is defined - Update final_result
          set_fact:
            final_result: "{{ final_result | combine({ \
                           'msg': 'Job is found but not completed. The return code is matched but no matched output content is found.' }) }}"

        - name: Save the contents of spool file if job_save_output_localpath is defined
          include_tasks: save_spool_files.yml
          vars:
            files_result_list: "{{ files_result.json }}"
          when: job_save_output_localpath is not undefined

        - name: Check and return final_result if job_search_output is defined - Fail if no matched output content is found
          fail:
            msg: "{{ final_result }}"
      when:
        - job_search_logic_upper == 'AND'
        - not job_matched_contents_found

    - block:
        - name: Check and return final_result if job_search_output is defined - Update final_result
          set_fact:
            final_result: "{{ final_result | combine({ \
                           'msg': 'Job is found but not completed. The return code is mismatched and no matched output content is found.' }) }}"

        - name: Save the contents of spool file if job_save_output_localpath is defined
          include_tasks: save_spool_files.yml
          vars:
            files_result_list: "{{ files_result.json }}"
          when: job_save_output_localpath is not undefined

        - name: Check and return final_result if job_search_output is defined - Fail if the return code is mismatched and no matched output content is found
          fail:
            msg: "{{ final_result }}"
      when:
        - job_search_logic_upper == 'OR'
        - (job_matched_rc_str == empty_str) or (job_matched_rc_int|int > job_max_rc|int)
        - not job_matched_contents_found

    - block:
        - name: Check and return final_result if job_search_output is defined - Update final_result
          set_fact:
            final_result: "{{ final_result | combine({ \
                           'msg': 'Job is found and completed successfully. The return code is matched although no matched output content is found.' }) }}"
      when:
        - job_search_logic_upper == 'OR'
        - job_matched_rc_str != empty_str
        - job_matched_rc_int|int <= job_max_rc|int
        - not job_matched_contents_found

    - block:
        - name: Check and return final_result if job_search_output is defined - Update final_result
          set_fact:
            final_result: "{{ final_result | combine({ \
                           'msg': 'Job is found and completed successfully. \
                           The matched output contents are found although the return code is mismatched.' }) }}"
      when:
        - job_search_logic_upper == 'OR'
        - (job_matched_rc_str == empty_str) or (job_matched_rc_int|int > job_max_rc|int)
        - job_matched_contents_found

    - block:
        - name: Check and return final_result if job_search_output is defined - Update final_result
          set_fact:
            final_result: "{{ final_result | combine({ \
                           'msg': 'Job is found and completed successfully. The return code is matched and the matched output contents are found.' }) }}"
      when:
        - job_matched_rc_str != empty_str
        - job_matched_rc_int|int <= job_max_rc|int
        - job_matched_contents_found

    - name: Save the contents of spool file if job_save_output_localpath is defined
      include_tasks: save_spool_files.yml
      vars:
        files_result_list: "{{ files_result.json }}"
      when: job_save_output_localpath is not undefined
  when: job_search_output is not undefined

- block:
    - name: Check and return final_result if job_search_output is not defined - Update final_result
      set_fact:
        final_result: "{{ final_result | combine({ \
                       'msg': 'Job is found but not completed. The return code is mismatched.' }) }}"

    - name: Save the contents of spool file if job_save_output_localpath is defined
      include_tasks: save_spool_files.yml
      when: job_save_output_localpath is not undefined

    - name: Check and return final_result if job_search_output is not defined - Fail if the return code is mismatched
      fail:
        msg: "{{ final_result }}"
  when:
    - job_search_output is undefined
    - (job_matched_rc_str == empty_str) or (job_matched_rc_int|int > job_max_rc|int)

- block:
    - name: Check and return final_result result if job_search_output is not defined - Update final_result
      set_fact:
        final_result: "{{ final_result | combine({ \
                       'msg': 'Job is found and completed successfully. The return code is matched.' }) }}"

    - name: Save the contents of spool file if job_save_output_localpath is defined
      include_tasks: save_spool_files.yml
      when: job_save_output_localpath is not undefined
  when:
    - job_search_output is undefined
    - job_matched_rc_str != empty_str
    - job_matched_rc_int|int <= job_max_rc|int

- name: Return final_result
  debug: var=final_result